[gd_resource type="VisualShader" load_steps=5 format=3 uid="uid://boeyymbfjq5vl"]

[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2x2x2.gd" id="1_xb4ws"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blur/blur9sample.gd" id="2_gbi2g"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_6rbrw"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0, 0, 0), 2, 5.0, 3, 1.154, 4, -0.477]
initialized = true
script = ExtResource("1_xb4ws")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_3hjm6"]
default_input_values = [2, -1.0, 3, 0.5]
initialized = true
script = ExtResource("2_gbi2g")

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;



// WorleyNoise2x2x2
float _cellular2x2x2NoiseFunc(vec3 P, float _jitter_w2x2x2) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P)- floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P);
	vec4 Pfx = Pf.x + vec4(0.0, -1.0, 0.0, -1.0);
	vec4 Pfy = Pf.y + vec4(0.0, 0.0, -1.0, -1.0);
	vec4 p = (34.0*(Pi.x+vec4(0.0,1.0,0.0,1.0))+1.0)*(Pi.x+vec4(0.0,1.0,0.0,1.0))-floor((34.0*(Pi.x+vec4(0.0,1.0,0.0,1.0))+1.0)*(Pi.x+vec4(0.0,1.0,0.0,1.0))*(1.0/289.0))*289.0;
	p = (34.0*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))+1.0)*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))-floor((34.0*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))+1.0)*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))*(1.0/289.0))*289.0;
	vec4 p1 = (34.0*(p+Pi.z)+1.0)*(p+Pi.z)-floor((34.0*(p+Pi.z)+1.0)*(p+Pi.z)*(1.0/289.0))*289.0;
	vec4 p2 = (34.0*(p+Pi.z+vec4(1.0))+1.0)*(p+Pi.z+vec4(1.0))-floor((34.0*(p+Pi.z+vec4(1.0))+1.0)*(p+Pi.z+vec4(1.0))*(1.0/289.0))*289.0;
	vec4 ox1 = fract(p1*K) - Ko;
	vec4 oy1 = (floor(p1*K) - floor(floor(p1*K) * (1.0 / 7.0)) * 7.0)*K - Ko;
	vec4 oz1 = floor(p1*K2)*Kz - Kzo;
	vec4 ox2 = fract(p2*K) - Ko;
	vec4 oy2 = (floor(p2*K) - floor(floor(p2*K) * (1.0 / 7.0)) * 7.0)*K - Ko;
	vec4 oz2 = floor(p2*K2)*Kz - Kzo;
	vec4 dx1 = Pfx + _jitter_w2x2x2*ox1;
	vec4 dy1 = Pfy + _jitter_w2x2x2*oy1;
	vec4 dz1 = Pf.z + _jitter_w2x2x2*oz1;
	vec4 dx2 = Pfx + _jitter_w2x2x2*ox2;
	vec4 dy2 = Pfy + _jitter_w2x2x2*oy2;
	vec4 dz2 = Pf.z - 1.0 + _jitter_w2x2x2*oz2;
	vec4 d1 = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
	vec4 d2 = dx2 * dx2 + dy2 * dy2 + dz2 * dz2;
	d1 = min(d1, d2);
	d1.xy = min(d1.xy, d1.wz);
	d1.x = min(d1.x, d1.y);
	return sqrt(d1.x);
}

void fragment() {
	float n_out2p0;
// WorleyNoise2x2x2:2
	vec3 n_in2p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in2p2 = 5.00000;
	float n_in2p3 = 1.15400;
	float n_in2p4 = -0.47700;
	{
		n_out2p0 = _cellular2x2x2NoiseFunc(vec3((UV.xy + n_in2p1.xy) * n_in2p2, n_in2p4), min(max(n_in2p3, 0.0), 1.0));
	}


// Output:0
	ALBEDO = vec3(n_out2p0);


}
"
graph_offset = Vector2(-204, -49)
nodes/fragment/0/position = Vector2(640, 100)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_6rbrw")
nodes/fragment/2/position = Vector2(160, 40)
nodes/fragment/3/node = SubResource("VisualShaderNodeCustom_3hjm6")
nodes/fragment/3/position = Vector2(-60, 220)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)
