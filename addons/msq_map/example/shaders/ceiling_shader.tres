[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://b8g1ir8wtbe5v"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_jtg6u"]
constant = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_6xioo"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_mx5g8"]
size = Vector2(688, 440)
expression = "uniform vec2 u_center;

void fragment() {
	vec3 u_center = VARYING(u_center);
    vec2 uv = VARYING(v_uv); // UV coordinates interpolated from the vertex shader
    vec2 centerToFragment = uv - u_center;
    float distance = length(centerToFragment);

    // Apply a falloff function to control the mist intensity
    float mistIntensity = smoothstep(0.0, 1.0, distance);

    // Use the mist intensity to blend the fragment color with the mist color
    vec4 mistColor = vec4(1.0, 1.0, 1.0, 1.0); // Replace with your desired mist color
    colour_out = mix(mistColor, COLOR, mistIntensity);
}"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_kqvo5"]
size = Vector2(717.5, 465.7)
expression = "void vertex() {
    // Calculate the center point of the quad
    vec4 centerPosition = (gl_PositionIn[0] + gl_PositionIn[1] + gl_PositionIn[2] + gl_PositionIn[3]) * 0.25;
    center_out = centerPosition.xy;
	uv_out = VERTEX.xy
    // Other vertex shader operations...
}"

[sub_resource type="VisualShaderNodeVaryingSetter" id="VisualShaderNodeVaryingSetter_g5a27"]
varying_name = "v_center"
varying_type = 4

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;


// Varyings
varying vec2 v_uv;
varying vec3 v_center;




void vertex() {
	vec3 n_out4p0;
	vec3 n_out4p1;
// Expression:4
	n_out4p0 = vec3(0.0, 0.0, 0.0);
	n_out4p1 = vec3(0.0, 0.0, 0.0);
	{
		void vertex() {
		    // Calculate the center point of the quad
		    vec4 centerPosition = (gl_PositionIn[0] + gl_PositionIn[1] + gl_PositionIn[2] + gl_PositionIn[3]) * 0.25;
		    n_out4p0 = centerPosition.xy;
			n_out4p1 = VERTEX.xy
		    // Other vertex shader operations...
		}
	}


// Output:0
	UV = vec2(n_out4p1.xy);


// VaryingSetter:5
	v_center = n_out4p0;


	v_uv = vec2(0.0);
}

void fragment() {
	vec3 n_out33p0;
// Expression:33
	n_out33p0 = vec3(0.0, 0.0, 0.0);
	{
		uniform vec2 u_center;
		
		void fragment() {
			vec3 u_center = VARYING(u_center);
		    vec2 uv = VARYING(v_uv); // UV coordinates interpolated from the vertex shader
		    vec2 centerToFragment = uv - u_center;
		    float distance = length(centerToFragment);
		
		    // Apply a falloff function to control the mist intensity
		    float mistIntensity = smoothstep(0.0, 1.0, distance);
		
		    // Use the mist intensity to blend the fragment color with the mist color
		    vec4 mistColor = vec4(1.0, 1.0, 1.0, 1.0); // Replace with your desired mist color
		    n_out33p0 = mix(mistColor, COLOR, mistIntensity);
		}
	}


// ColorConstant:32
	vec4 n_out32p0 = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Output:0
	ALBEDO = n_out33p0;
	METALLIC = n_out32p0.x;


}
"
graph_offset = Vector2(-436.809, -122.415)
varyings/v_uv = "0,3"
varyings/v_center = "0,4"
nodes/vertex/0/position = Vector2(780, 220)
nodes/vertex/4/node = SubResource("VisualShaderNodeExpression_kqvo5")
nodes/vertex/4/position = Vector2(-240, 0)
nodes/vertex/4/size = Vector2(717.5, 465.7)
nodes/vertex/4/input_ports = ""
nodes/vertex/4/output_ports = "0,4,center_out;1,4,uv_out;"
nodes/vertex/4/expression = "void vertex() {
    // Calculate the center point of the quad
    vec4 centerPosition = (gl_PositionIn[0] + gl_PositionIn[1] + gl_PositionIn[2] + gl_PositionIn[3]) * 0.25;
    center_out = centerPosition.xy;
	uv_out = VERTEX.xy
    // Other vertex shader operations...
}"
nodes/vertex/5/node = SubResource("VisualShaderNodeVaryingSetter_g5a27")
nodes/vertex/5/position = Vector2(760, 20)
nodes/vertex/connections = PackedInt32Array(4, 0, 5, 0, 4, 1, 0, 4)
nodes/fragment/0/position = Vector2(920, 120)
nodes/fragment/31/node = SubResource("VisualShaderNodeColorConstant_jtg6u")
nodes/fragment/31/position = Vector2(720, 100)
nodes/fragment/32/node = SubResource("VisualShaderNodeColorConstant_6xioo")
nodes/fragment/32/position = Vector2(700, 340)
nodes/fragment/33/node = SubResource("VisualShaderNodeExpression_mx5g8")
nodes/fragment/33/position = Vector2(-20, 120)
nodes/fragment/33/size = Vector2(688, 440)
nodes/fragment/33/input_ports = ""
nodes/fragment/33/output_ports = "0,4,colour_out;"
nodes/fragment/33/expression = "uniform vec2 u_center;

void fragment() {
	vec3 u_center = VARYING(u_center);
    vec2 uv = VARYING(v_uv); // UV coordinates interpolated from the vertex shader
    vec2 centerToFragment = uv - u_center;
    float distance = length(centerToFragment);

    // Apply a falloff function to control the mist intensity
    float mistIntensity = smoothstep(0.0, 1.0, distance);

    // Use the mist intensity to blend the fragment color with the mist color
    vec4 mistColor = vec4(1.0, 1.0, 1.0, 1.0); // Replace with your desired mist color
    colour_out = mix(mistColor, COLOR, mistIntensity);
}"
nodes/fragment/connections = PackedInt32Array(32, 0, 0, 2, 33, 0, 0, 0)
